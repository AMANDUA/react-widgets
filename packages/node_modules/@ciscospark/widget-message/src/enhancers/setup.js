import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {getFeature} from '@ciscospark/redux-module-features';
import {connectToMercury} from '@ciscospark/redux-module-mercury';
import {
  DEVELOPER,
  WIDGET_ADAPTIVE_CARD
} from '@ciscospark/react-component-utils';

import {updateWidgetState} from '../actions';
import getMessageWidgetProps from '../selector';

function connectWebsocket(props) {
  const {
    sparkInstance,
    mercuryStatus
  } = props;


  if (!mercuryStatus.hasConnected
      && !mercuryStatus.connecting
      && !mercuryStatus.connected
      && sparkInstance.internal.device.registered) {
    props.connectToMercury(sparkInstance);
  }
}


function getFeatures(props) {
  const {
    sparkInstance,
    widgetStatus
  } = props;

  // Initial fetching of adaptive card feature
  if (!widgetStatus.hasFetchedAdaptiveCardFeature) {
    props.getFeature(DEVELOPER, WIDGET_ADAPTIVE_CARD, sparkInstance).then(() => {
      props.updateWidgetState({
        hasFetchedAdaptiveCardFeature: true
      });
    });
  }
}

export function setup(props) {
  const {
    mercuryStatus,
    sparkInstance,
    sparkState
  } = props;

  if (sparkInstance
    && sparkState.authenticated
    && sparkState.registered
    && !sparkState.hasError
  ) {
    getFeatures(props);

    if (!mercuryStatus.connected) {
      connectWebsocket(props);
    }
  }
}

export default compose(
  connect(
    getMessageWidgetProps,
    (dispatch) => bindActionCreators({
      connectToMercury,
      getFeature,
      updateWidgetState
    }, dispatch)
  ),
  lifecycle({
    componentWillMount() {
      setup(this.props);
    },
    shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    },
    componentWillReceiveProps(nextProps) {
      setup(nextProps, this.props);
    }
  })
);
