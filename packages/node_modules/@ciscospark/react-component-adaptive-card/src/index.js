import React from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import classnames from 'classnames';
import {getAdaptiveCard, getDecryptedURLs, API_ACTIVITY_VERB} from '@ciscospark/react-component-utils';
import './adaptiveCard.scss';

class AdaptiveCard extends React.Component {
  constructor(props) {
    super(props);
    this.nodeElement = React.createRef();
    this.addChildNode = this.addChildNode.bind(this);
    this.setupState = this.setupState.bind(this);
    this.cards = [];
    this.hasReplacedCard = false;
    this.state = {
      childNodes: [],
      hasReplacedImagesInJSON: false
    };
  }

  componentDidMount() {
    if (Object.prototype.hasOwnProperty.call(this, 'nodeElement') && Object.prototype.hasOwnProperty.call(this.nodeElement, 'current')) {
      this.nodeElement.current.appendChild(
        getAdaptiveCard(this.props.cards, this.props.displayName, this.props.sdkInstance, this.addChildNode)
      );
    }
  }

  componentDidUpdate(prevProps) {
    if (prevProps !== this.props && this.props.verb === API_ACTIVITY_VERB.SHARE) {
      try {
        this.cards[0] = getDecryptedURLs(this.props);
        if (this.cards[0]) {
          this.setupState();
        }
      }
      catch (error) {
        this.props.sdkInstance.logger.error('Unable render Adaptive Card', error.message);
      }
    }

    return null;
  }

  componentWillUnmount() {
    this.state.childNodes.forEach((childNode) => {
      ReactDOM.unmountComponentAtNode(childNode);
    });
  }

  /**
   * set state to tohasReplacedImagesInJSON
   * @returns {void}
   */
  setupState() {
    this.setState({hasReplacedImagesInJSON: true});
  }

  /**
   * set state to maintain a list of all the DOM nodes
   * @param {object} childNode
   * @returns {void}
   */
  addChildNode(childNode) {
    this.setState((prevState) => ({childNodes: [...prevState.childNodes, childNode]}));
  }

  render() {
    const activityItemMsgClass = classnames('activity-item--adaptive-card');

    if (this.state.hasReplacedImagesInJSON && !this.state.hasReplacedCard) {
      if (Object.prototype.hasOwnProperty.call(this, 'nodeElement') && Object.prototype.hasOwnProperty.call(this.nodeElement, 'current')) {
        this.nodeElement.current.replaceChild(
          getAdaptiveCard(this.cards, this.props.displayName, this.props.sdkInstance, this.addChildNode),
          this.nodeElement.current.firstChild
        );
        this.hasReplacedCard = true;
      }
    }

    return (
      <div
        ref={this.nodeElement}
        className={activityItemMsgClass}
      />
    );
  }
}

AdaptiveCard.propTypes = {
  cards: PropTypes.array,
  displayName: PropTypes.string,
  sdkInstance: PropTypes.object,
  verb: PropTypes.string
};

AdaptiveCard.defaultProps = {
  cards: [],
  displayName: '',
  sdkInstance: {},
  verb: ''
};

export default AdaptiveCard;
