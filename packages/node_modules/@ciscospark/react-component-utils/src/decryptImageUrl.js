import {CARD_CONTAINS_IMAGE} from '@ciscospark/react-component-utils';

const urlTypes = ['url', 'backgroundImage', 'iconUrl'];

/**
 * replaces the index with the uri in cards
 * @param {Object} cardsActivity
 * @param {Array} decryptedURLs
 * @returns {Object}
 */
export function replaceIndexWithBlobURL(cardsActivity, decryptedURLs) {
  const activityObject = cardsActivity;

  if (activityObject) {
    // eslint-disable-next-line no-restricted-syntax
    for (const property in activityObject) {
      if (Object.prototype.hasOwnProperty.call(activityObject, property)) {
        const index = urlTypes.indexOf(property);
        const key = urlTypes[index];

        if (urlTypes.includes(property) && property === key && !Number.isNaN(Number(activityObject[key]))) {
          activityObject[key] = decryptedURLs[Number(activityObject[key])];
        }
        else if (typeof activityObject[property] === 'object') {
          replaceIndexWithBlobURL(activityObject[property], decryptedURLs);
        }
      }
    }
  }

  return activityObject;
}

/**
 * get all decrypted url's of cards and return the modified card object
 * @param {Object} activityObject
 * @returns {Object}
 */
export function getDecryptedURls(activityObject) {
  const decryptedURLs = activityObject.items.filter((file) => file.type === CARD_CONTAINS_IMAGE)
    .map((file) => {
      const thumbnail = file.mimeType === 'image/gif' ? activityObject.share.getIn(['files', file.url]) : activityObject.share.getIn(['files', file.image.url]);

      if (thumbnail) {
        const objectUrl = thumbnail.get('objectUrl');

        return objectUrl;
      }

      return undefined;
    });
  const cardsObject = JSON.parse(activityObject.cards[0]);
  const undefinedUrls = decryptedURLs.filter((file) => file === undefined);

  if (undefinedUrls.length === 0) {
    const modifiedCardsObject = replaceIndexWithBlobURL(cardsObject, decryptedURLs);

    return JSON.stringify(modifiedCardsObject);
  }

  return null;
}
