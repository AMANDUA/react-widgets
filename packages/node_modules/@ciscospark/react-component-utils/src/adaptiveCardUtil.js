import * as AdaptiveCard from 'adaptivecards';

import {CARD_ATTACHMENT_TYPE} from './constants';

/**
 * It will return the json object by taking the input string
 * @param {string} card
 * @param {object} sparkInstance
 * @returns {object}
 */

export function getCardConfig(card, sparkInstance) {
  try {
    return JSON.parse(card);
  }
  catch (err) {
    sparkInstance.logger.error('Failed to parse Adaptive Card', err);
  }

  return null;
}

/**
 * It will return the rendered adaptive card when message contains card
 *  else returns display name
 * @param {array} cards
 * @param {string} displayName
 * @param {object} sparkInstance
 * @returns {object}
 */

export function getAdaptiveCard(cards, displayName, sparkInstance) {
  // Parse the card for rendering
  try {
    const cardConfig = getCardConfig(cards[0]);
    const adaptiveCard = new AdaptiveCard.AdaptiveCard();

    adaptiveCard.parse(cardConfig);

    return adaptiveCard.render();
  }
  catch (err) {
    sparkInstance.logger.error('Failed to parse Adaptive Card', err);
  }

  return displayName;
}

/**
 * It will return the boolean value for adaptive card exists or not
 * @param {array} cards
 * @param {object} sparkInstance
 * @returns {boolean}
 */

export function hasAdaptiveCard(cards, sparkInstance) {
  if (cards.length > 0 && Array.isArray(cards)) {
    const cardConfig = getCardConfig(cards[0], sparkInstance);

    return cardConfig !== null && cardConfig.type === CARD_ATTACHMENT_TYPE;
  }

  return false;
}

