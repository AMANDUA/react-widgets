import {Component} from 'react';
import PropTypes from 'prop-types';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';

import {
  updateSparkStatus,
  registerDevice,
  storeSparkInstance
} from './actions';
import createSpark, {createSparkJwt} from './spark';

const injectedPropTypes = {
  spark: PropTypes.object.isRequired,
  storeSparkInstance: PropTypes.func.isRequired,
  updateSparkStatus: PropTypes.func.isRequired
};

const propTypes = {
  accessToken: PropTypes.string,
  guestToken: PropTypes.string,
  ...injectedPropTypes
};

const defaultProps = {
  accessToken: '',
  guestToken: ''
};

class SparkComponent extends Component {
  constructor(props) {
    super(props);

    this.storeAndListen = this.storeAndListen.bind(this);
  }

  componentDidMount() {
    const {
      accessToken,
      guestToken,
      spark
    } = this.props;

    const sparkInstance = spark.get('spark');

    if (!sparkInstance) {
      if (guestToken) {
        createSparkJwt(guestToken, this.props).then(this.storeAndListen);
      }
      else {
        createSpark(accessToken, this.props).then(this.storeAndListen);
      }
    }
    else {
      this.listenToSparkEvents(sparkInstance);
    }
  }

  setupDevice(spark) {
    const {
      authenticated,
      registered,
      registerError,
      registering
    } = this.props.spark.get('status').toJS();

    if (authenticated && !registered && !registering && !registerError) {
      this.props.registerDevice(spark);
    }
  }

  listenToSparkEvents(spark) {
    spark.listenToAndRun(spark, 'change:canAuthorize', () => {
      this.props.updateSparkStatus({authenticated: spark.canAuthorize});
    });

    spark.listenToAndRun(spark, 'change:isAuthenticating', () => {
      this.props.updateSparkStatus({authenticating: spark.isAuthenticating});
    });

    spark.listenToAndRun(spark.internal.device, 'change:registered', () => {
      this.props.updateSparkStatus({registered: spark.internal.device.registered});
    });

    this.setupDevice(spark);
  }

  storeAndListen(sparkInstance) {
    this.props.storeSparkInstance(sparkInstance);
    this.listenToSparkEvents(sparkInstance);
  }

  render() {
    return null;
  }
}

SparkComponent.propTypes = propTypes;
SparkComponent.defaultProps = defaultProps;

export default connect(
  (state) => ({
    spark: state.spark
  }),
  (dispatch) => bindActionCreators({
    updateSparkStatus,
    registerDevice,
    storeSparkInstance
  }, dispatch)
)(SparkComponent);
