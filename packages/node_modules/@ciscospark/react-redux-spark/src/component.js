import {Component} from 'react';
import PropTypes from 'prop-types';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import {addError} from '@ciscospark/redux-module-errors';


import {
  updateSparkStatus,
  registerDevice,
  storeSparkInstance
} from './actions';
import createSpark, {createSparkJwt} from './spark';

const injectedPropTypes = {
  spark: PropTypes.object.isRequired,
  storeSparkInstance: PropTypes.func.isRequired,
  updateSparkStatus: PropTypes.func.isRequired,
  addError: PropTypes.func.isRequired
};

const propTypes = {
  accessToken: PropTypes.string,
  guestToken: PropTypes.string,
  ...injectedPropTypes
};

const defaultProps = {
  accessToken: '',
  guestToken: ''
};

const PLUGINS = ['authorization', 'logger', 'people', 'phone', 'rooms'];
const INTERNAL_PLUGINS = ['conversation', 'feature', 'flag', 'mercury', 'presence', 'search', 'team'];

export class SparkComponent extends Component {
  constructor(props) {
    super(props);

    this.loadSparkInstance = this.loadSparkInstance.bind(this);
  }

  componentDidMount() {
    const {
      accessToken,
      guestToken,
      spark
    } = this.props;

    const sparkInstance = spark.get('spark');

    if (!sparkInstance) {
      if (guestToken) {
        createSparkJwt(guestToken, this.props).then(this.loadSparkInstance);
      }
      else {
        createSpark(accessToken, this.props).then(this.loadSparkInstance);
      }
    }
    else {
      this.listenToSparkEvents(sparkInstance);
    }
  }

  /**
   * Register the device if the user has been authenticated
   * and the device is not regusterd yet.
   * @param {Object} sparkInstance
   */
  setupDevice(sparkInstance) {
    const {
      authenticated,
      registered,
      registerError,
      registering
    } = this.props.spark.get('status').toJS();

    if (authenticated && !registered && !registering && !registerError) {
      this.props.registerDevice(sparkInstance);
    }
  }

  /**
   * Listen to any new events and update the sprak instance
   * status accordingly
   * @param {Object} sparkInstance
   */
  listenToSparkEvents(sparkInstance) {
    sparkInstance.listenToAndRun(sparkInstance, 'change:canAuthorize', () => {
      this.props.updateSparkStatus({authenticated: sparkInstance.canAuthorize});
    });

    sparkInstance.listenToAndRun(sparkInstance, 'change:isAuthenticating', () => {
      this.props.updateSparkStatus({authenticating: sparkInstance.isAuthenticating});
    });

    sparkInstance.listenToAndRun(sparkInstance.internal.device, 'change:registered', () => {
      this.props.updateSparkStatus({registered: sparkInstance.internal.device.registered});
    });

    this.setupDevice(sparkInstance);
  }

  /**
   * Verify for the plugins, store the spark instance
   * and listen to any events
   * @param {Object} sparkInstance
   */
  loadSparkInstance(sparkInstance) {
    this.verifyPlugins(sparkInstance);
    this.props.storeSparkInstance(sparkInstance);
    this.listenToSparkEvents(sparkInstance);
  }

  /**
   * Verify if all the plugins have been injected
   * properly to the webex SDK instance
   * @param {Object} sparkInstance
   */
  verifyPlugins(sparkInstance) {
    let contains = false;

    for (const plugin of PLUGINS) {
      contains = Object.prototype.hasOwnProperty.call(sparkInstance, plugin);

      if (!contains) {
        this.props.addError({
          id: 'webex-plugins-missing',
          displayTitle: 'Something\'s not right. Please try again',
          displaySubtitle: `Webex SDK instance plugin ${plugin} is not injected to the widget properly`,
          temporary: false
        });
      }
    }

    for (const internalPlugin of INTERNAL_PLUGINS) {
      contains = Object.prototype.hasOwnProperty.call(sparkInstance.internal, internalPlugin);

      if (!contains) {
        this.props.addError({
          id: 'webex-internal-plugins-missing',
          displayTitle: 'Something\'s not right. Please try again',
          displaySubtitle: `Webex SDK instance internal plugin ${internalPlugin} is not injected to the widget properly`,
          temporary: false
        });
      }
    }
  }

  render() {
    return null;
  }
}

SparkComponent.propTypes = propTypes;
SparkComponent.defaultProps = defaultProps;

export default connect(
  (state) => ({
    spark: state.spark
  }),
  (dispatch) => bindActionCreators({
    updateSparkStatus,
    registerDevice,
    storeSparkInstance,
    addError
  }, dispatch)
)(SparkComponent);
