import React from 'react';
import renderer from 'react-test-renderer';
import {Provider} from 'react-redux';

import {createMockStore} from '@ciscospark/react-redux-spark-fixtures';

import SparkConnectedComponent, {SparkComponent} from './component';

describe('spark component', () => {
  let spark, sparkInstance;

  beforeEach(() => {
    spark = {
      authorization: 'authorization',
      logger: 'logger',
      people: 'people',
      phone: 'phone',
      rooms: 'rooms',
      internal: {
        conversation: 'conversation',
        feature: 'feature',
        flag: 'flag',
        mercury: 'mercury',
        presence: 'presence',
        search: 'search',
        team: 'team'
      }
    };
    sparkInstance = new SparkComponent({
      spark,
      storeSparkInstance: jest.fn(),
      updateSparkStatus: jest.fn(),
      addError: jest.fn()
    });
  });

  it('verifyPlugins() verifies all plugins to be injected properly to webex SDK instance', () => {
    sparkInstance.verifyPlugins(spark);
    expect(sparkInstance.props.addError).not.toHaveBeenCalled();
  });

  it('verifyPlugins() throws an error if one of the external plugin is not injected properly', () => {
    delete spark.logger;
    sparkInstance.verifyPlugins(spark);
    expect(sparkInstance.props.addError).toHaveBeenCalled();
  });

  it('verifyPlugins() throws an error if one of the internal plugin is not injected properly', () => {
    delete spark.internal.mercury;
    sparkInstance.verifyPlugins(spark);
    expect(sparkInstance.props.addError).toHaveBeenCalled();
  });

  it('renders correctly', () => {
    const store = createMockStore();
    const component = renderer.create(
      <Provider store={store}>
        <SparkConnectedComponent
          spark={spark}
          storeSparkInstance={jest.fn()}
          updateSparkStatus={jest.fn()}
          addError={jest.fn()}
        />
      </Provider>
    );

    expect(component.toTree()).toMatchSnapshot();
  });

  afterEach(() => {
    spark = null;
    sparkInstance = null;
  });
});
