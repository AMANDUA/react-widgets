import {
  Record,
  Map
} from 'immutable';

import {STORE_MEETING} from './actions';

const InitialState = Record({
  byDestination: Map(),
  byLocusUrl: Map(),
  byId: Map()
});

export const initialState = new InitialState();

export default function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_MEETING: {
      const {
        meeting,
        destinationId,
        destinationType
      } = action.payload;

      const {locusUrl, id} = meeting;

      // Store the meeting object by id
      let updatedState = state
        .setIn(['byId', id], meeting);

      // Store a link to the meeting's ID by destination
      updatedState = updatedState.setIn(['byDestination', `${destinationType}-${destinationId}`], id);

      // Store a link to the meeting's ID by locus
      if (locusUrl) {
        updatedState = updatedState.setIn(['byLocusUrl', locusUrl], id);
      }

      return updatedState;
    }

    default:
      return state;
  }
}
