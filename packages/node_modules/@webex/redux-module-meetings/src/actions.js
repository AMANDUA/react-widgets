export const JOIN_MEETING = 'meetings/JOIN_MEETING';
export const STORE_MEETING = 'meetings/STORE_MEETING';
export const UPDATE_MEETING_STATE = 'meetings/UPDATE_MEETING_STATE';

function storeMeeting({destinationType, destinationId, meeting}) {
  return {
    type: STORE_MEETING,
    payload: {
      destinationType,
      destinationId,
      meeting
    }
  };
}

function joinMeeting(meeting) {
  return {
    type: JOIN_MEETING,
    payload: {
      meeting
    }
  };
}

function updateMeetingState(meeting, meetingState) {
  return {
    type: UPDATE_MEETING_STATE,
    payload: {
      meeting,
      meetingState
    }
  };
}

function bindMeetingEvents(meeting, dispatch) {
  // Handle media streams changes to ready state
  meeting.on('media:ready', (media) => {
    if (!media) {
      return;
    }
    if (media.type === 'local') {
      dispatch(updateMeetingState(meeting, {hasLocalMedia: true}));
    }
    if (media.type === 'remoteVideo') {
      dispatch(updateMeetingState(meeting, {hasRemoteVideo: true}));
    }
    if (media.type === 'remoteAudio') {
      dispatch(updateMeetingState(meeting, {hasRemoteAudio: true}));
    }
  });
}

export function createAndJoinMeeting({destinationType, destinationId}, sdkInstance) {
  return (dispatch) => sdkInstance.meetings.create(destinationId)
    .then((meeting) => {
      dispatch(storeMeeting({destinationId, destinationType, meeting}));

      bindMeetingEvents(meeting, dispatch);

      return meeting.join().then(() => {
        dispatch(joinMeeting(meeting));

        return meeting;
      });
    });
}

export function addMediaToMeeting({
  meetingId,
  receiveVideo,
  receiveAudio,
  receiveShare,
  sendVideo,
  sendAudio,
  sendShare
}, sdkInstance) {
  return () => {
    // Get meeting instance from the SDK
    const meeting = sdkInstance.meetings.meetingCollection.meetings[meetingId];

    if (!meeting) {
      throw new Error('#addMediaToMeeting - unable to locate meeting with id: ', meetingId);
    }

    const mediaSettings = {
      receiveVideo,
      receiveAudio,
      receiveShare,
      sendVideo,
      sendAudio,
      sendShare
    };

    // Get our local media stream and add it to the meeting
    return meeting.getMediaStreams(mediaSettings).then((mediaStreams) => {
      const [localStream, localShare] = mediaStreams;

      meeting.addMedia({
        localShare,
        localStream,
        mediaSettings
      });
    });
  };
}
