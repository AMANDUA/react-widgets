import {createSelector} from 'reselect';

import {PENDING_STATUS} from '@ciscospark/redux-module-users';

import {destinationTypes} from './index';

const getSDKState = (state) => state.spark.get('status');
const getSDKInstance = (state) => state.spark.get('spark');
const getMercuryStatus = (state) => state.mercury.get('status');
const getUsers = (state) => state.users;
const getOwnProps = (state, ownProps) => ownProps;

const getDestinationDetails = createSelector(
  [getUsers, getOwnProps],
  (users, props) => {
    let avatarId, displayName;

    if (props.destinationType === destinationTypes.EMAIL) {
      // Get User ID from store
      const userId = users.getIn(['byEmail', props.destinationId]);

      if (userId && userId !== PENDING_STATUS) {
        avatarId = userId;

        // Get Display name from store
        const user = users.getIn(['byId', userId]);

        if (user) {
          ({displayName} = user);
        }
      }
    }

    const destination = {
      id: avatarId,
      avatarImage: '',
      displayName
    };

    return destination;
  }
);

const getMeetingsWidgetProps = createSelector(
  [getSDKState, getSDKInstance, getMercuryStatus, getDestinationDetails],
  (sdkState, sdkInstance, mercuryStatusRedux, destination) => {
    // Mercury Status isn't a Redux Record yet, convert to js
    const mercuryStatus = mercuryStatusRedux.toJS();

    // Meetings Widget is ready when SDK has device registered and websockets are connected
    const isReady = sdkState.authenticated && sdkState.registered && !sdkState.hasError &&
      mercuryStatus.hasConnected && destination.displayName;

    return {
      destination,
      isReady,
      mercuryStatus,
      sdkState,
      sdkInstance
    };
  }
);

export default getMeetingsWidgetProps;
