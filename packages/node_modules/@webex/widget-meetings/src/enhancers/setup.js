import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {connectToMercury} from '@ciscospark/redux-module-mercury';

import getMeetingsWidgetProps from '../selector';


/**
 * Connects to the websocket server (mercury)
 * @param {object} props
 */
function connectWebsocket(props) {
  const {
    sdkInstance,
    mercuryStatus
  } = props;


  if (!mercuryStatus.hasConnected
      && !mercuryStatus.connecting
      && !mercuryStatus.connected
      && sdkInstance.internal.device.registered) {
    props.connectToMercury(sdkInstance);
  }
}


/**
 * The main setup process that proceeds through a series of events
 * based on the state of the application.
 *
 * @export
 * @param {*} props
 */
export function setup(props) {
  const {
    mercuryStatus,
    sdkInstance,
    sdkState
  } = props;

  // We cannot do anything until the sdk is ready
  if (sdkInstance
    && sdkState.authenticated
    && sdkState.registered
    && !sdkState.hasError
  ) {
    if (!mercuryStatus.connected) {
      connectWebsocket(props);
    }
  }
}

export default compose(
  connect(
    getMeetingsWidgetProps,
    (dispatch) => bindActionCreators({
      connectToMercury
    }, dispatch)
  ),
  lifecycle({
    componentWillMount() {
      setup(this.props);
    },
    shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    },
    componentWillReceiveProps(nextProps) {
      setup(nextProps, this.props);
    }
  })
);
